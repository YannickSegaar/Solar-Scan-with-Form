
--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/package.json ---

{
  "name": "solar-potential",
  "version": "1.0.0",
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "preview": "vite preview",
    "start": "node build",
    "test": "npm run test:integration && npm run test:unit",
    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
    "lint": "prettier --check . && eslint .",
    "format": "prettier --write .",
    "test:integration": "playwright test",
    "test:unit": "vitest run --coverage"
  },
  "dependencies": {
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "@fontsource/fira-mono": "^5.0.8",
    "@googlemaps/js-api-loader": "^1.16.2",
    "@material/web": "^1.1.1",
    "@playwright/test": "^1.41.0",
    "@sveltejs/adapter-auto": "^3.1.0",
    "@sveltejs/adapter-node": "^3.0.1",
    "@sveltejs/kit": "^2.3.5",
    "@sveltejs/vite-plugin-svelte": "^3.0.1",
    "@types/cookie": "^0.6.0",
    "@types/google.maps": "^3.54.10",
    "@types/google.visualization": "^0.0.73",
    "@types/proj4": "^2.5.5",
    "@typescript-eslint/eslint-plugin": "^6.19.0",
    "@typescript-eslint/parser": "^6.19.0",
    "@vitest/coverage-v8": "^1.2.1",
    "autoprefixer": "^10.4.17",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-svelte": "^2.35.1",
    "geotiff": "^2.1.1",
    "geotiff-geokeys-to-proj4": "^2024.1.14",
    "google-charts": "^2.0.0",
    "postcss": "^8.4.33",
    "prettier": "^3.2.4",
    "prettier-plugin-svelte": "^3.1.2",
    "proj4": "^2.10.0",
    "svelte": "^4.2.9",
    "svelte-check": "^3.6.3",
    "tailwindcss": "^3.4.1",
    "tslib": "^2.6.2",
    "typescript": "^5.3.3",
    "vite": "^5.0.11",
    "vitest": "^1.2.1"
  },
  "type": "module"
}


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/svelte.config.js ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

			https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

import adapter from '@sveltejs/adapter-node';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';
import * as child_process from 'node:child_process';

/** @type {import('@sveltejs/kit').Config} */
const config = {
  // Consult https://kit.svelte.dev/docs/integrations#preprocessors
  // for more information about preprocessors
  preprocess: vitePreprocess(),

  kit: {
    // adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
    // If your environment is not supported or you settled on a specific environment, switch out the adapter.
    // See https://kit.svelte.dev/docs/adapters for more information about adapters.
    adapter: adapter(),

    // https://kit.svelte.dev/docs/configuration#version
    version: {
      name: child_process.execSync('git rev-parse HEAD').toString().trim(),
    },
  },
};

export default config;


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/playwright.config.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

			https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

import type { PlaywrightTestConfig } from '@playwright/test';

const config: PlaywrightTestConfig = {
  webServer: {
    command: 'npm run build && npm run preview',
    port: 4173,
  },
  testDir: 'tests',
  testMatch: /(.+\.)?(test|spec)\.[jt]s/,
};

export default config;


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/postcss.config.js ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/tailwind.config.js ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{html,js,svelte,ts}'],
  theme: {
    extend: {},
  },
  plugins: [],
};


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/tsconfig.json ---

{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "types": ["google.visualization"],
  },
  // Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
  //
  // If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
  // from the referenced tsconfig.json - TypeScript does not merge them in
}


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/vite.config.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

			https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vitest/config';

export default defineConfig({
  plugins: [sveltekit()],
  test: {
    include: ['src/**/*.{test,spec}.{js,ts}'],
  },
});


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/vitest.config.js ---

/*
 Copyright 2024 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

export default {
  test: {
    deps: {
      inline: ['proj4'],
    },
  },
};


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/README.md ---

# ☀️ Solar Potential demo

> _This is not an officially supported Google product._

The [Solar API](https://developers.google.com/maps/documentation/solar/overview)
offers many benefits to solar marketplace websites, solar installers, and solar SaaS designers.

This is a demo app that showcases and displays the information from the Solar API into a map.

## Before you begin

You need a Google Cloud project with a billing account and the Maps JavaScript API and Solar API enabled.

To learn more, see [Set up in Cloud Console](https://developers.google.com/maps/documentation/javascript/cloud-setup).

Additionally, you need a development environment with [Node.js](https://nodejs.org/en) installed.

## Google Maps API key

This app requires a Google Maps API key to work, follow the [Use API Keys](https://developers.google.com/maps/documentation/javascript/get-api-key) guide to create a new one.

Once you have your API key, update the [`.env`](.env) file with your key.

```sh
VITE_GOOGLE_MAPS_API_KEY="My Google Maps API key"
```

## Running the app

First, run `npm install` to install the required dependencies.

### Developer mode

To start the app in developer mode, this allows hot-reloads.
This means that every time you change a file, the app reloads itself automatically.

```sh
# Run in developer mode.
npm run dev
```

### Production mode

Starting in developer mode enables a lot of useful tools while developing, but for a production version we first need to build the app.

```sh
# Build the app.
npm run build

# Start the app.
npm run start
```

## Deploying to Cloud Run

One option to deploy your app is with [Cloud Run](https://cloud.google.com/run).
It's easy to use and allows us to build and deploy scalable containerized apps written in any language on a fully managed platform.

For some languages like Node.js, it infers the configuration and can [deploy from source directly](https://cloud.google.com/run/docs/deploying-source-code), without any additional configurations!
This uploads your source, builds it with [Cloud Build](https://cloud.google.com/build), deploys it to Cloud Run, and starts the service with `npm run start`.
All with a single command.

```sh
# Choose the Cloud location to deploy the app.
export LOCATION="us-central1"

# Build and deploy the app from source.
gcloud run deploy "solar-potential" \
  --source="." \
  --region="$LOCATION" \
  --allow-unauthenticated
```

## Checking your code

You can use `npm run check` to do type checking and check for other common issues.
You can also use `npm run check:watch` to continuously check your code when you save your changes.

To check for styling and formatting issues, you can use `npm run lint`.
To fix any lint issues, use `npm run format` to automatically format all the code base.

## Tech stack

- [Solar API](https://developers.google.com/maps/documentation/solar/overview): Get solar panel configurations, solar potential, and data layers.
- [Google Maps](https://developers.google.com/maps/documentation/javascript/overview): Display a custom map with the Google Maps JavaScript API.
- [Material Desgin 3](https://m3.material.io): Material Design 3 [web components](https://github.com/material-components/material-web#readme).
- [SvelteKit](https://kit.svelte.dev): Compiler framework to develop declarative reactive web apps with [TypeScript](https://www.typescriptlang.org).
- [Vite](https://vitejs.dev): Build tool with a fast development experience for modern web projects.
- [Tailwind](https://tailwindcss.com): CSS framework for design and styling.
- [ESLint](https://eslint.org): Statically analyze code to quickly find problems.
- [Prettier](https://prettier.io): Opinionated code formatter.


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/app.d.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

			https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
declare global {
  namespace App {
    // interface Error {}
    // interface Locals {}
    // interface PageData {}
    // interface Platform {}
  }
}

export {};


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/app.html ---

<!doctype html>

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%sveltekit.assets%/favicon.png" />
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Symbols+Outlined"
      rel="stylesheet"
    />
    <meta name="viewport" content="width=device-width" />
    %sveltekit.head%

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-ELSHHVFHYD"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());

      gtag('config', 'G-ELSHHVFHYD');
    </script>
  </head>

  <body data-sveltekit-preload-data="hover">
    <div style="display: contents">%sveltekit.body%</div>
  </body>
</html>


--- Directory: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes ---

--- Directory: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/theme ---

--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/+layout.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import '../app.css';
  import '../theme/theme.css';

  import '@material/web/button/elevated-button';
  import '@material/web/button/filled-button';
  import '@material/web/button/filled-tonal-button';
  import '@material/web/button/outlined-button';
  import '@material/web/button/text-button';
  import '@material/web/dialog/dialog';
  import '@material/web/divider/divider';
  import '@material/web/icon/icon';
  import '@material/web/iconbutton/filled-icon-button';
  import '@material/web/iconbutton/icon-button';
  import '@material/web/progress/circular-progress';
  import '@material/web/progress/linear-progress';
  import '@material/web/ripple/ripple';
  import '@material/web/slider/slider';
  import '@material/web/switch/switch';
  import '@material/web/textfield/filled-text-field';
  import '@material/web/textfield/outlined-text-field';

  // https://kit.svelte.dev/docs/configuration#version
  import { beforeNavigate } from '$app/navigation';
  import { updated } from '$app/stores';

  beforeNavigate(({ willUnload, to }) => {
    if ($updated && !willUnload && to?.url) {
      location.href = to.url.href;
    }
  });
</script>

<svelte:head>
  <title>Protium Quickscan</title>
  <meta name="description" content="Solar API demo" />
</svelte:head>

<main class="surface on-surface-text body-medium flex flex-col w-screen h-screen">
  <slot />
</main>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/+page.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

 <script lang="ts">
  /* global google */

  import * as GMAPILoader from '@googlemaps/js-api-loader';
  const { Loader } = GMAPILoader;
  import { onMount } from 'svelte';

  import SearchBar from './components/SearchBar.svelte';
  import Sections from './sections/Sections.svelte';

  const googleMapsApiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;
  const defaultPlace = {
    name: 'Protium, Schweitzerlaan 12, 9728NP Groningen, Nederland',
    address: 'Schweitzerlaan 12, 9728NP Groningen, Nederland',
  };
  let location: google.maps.LatLng | undefined;
  const zoom = 20;

  // Initialize app.
  let mapElement: HTMLElement;
  let map: google.maps.Map;
  let geometryLibrary: google.maps.GeometryLibrary;
  let mapsLibrary: google.maps.MapsLibrary;
  let drawingLibrary: google.maps.DrawingLibrary;
  let placesLibrary: google.maps.PlacesLibrary;
  onMount(async () => {
    // Load the Google Maps libraries.
    const loader = new Loader({ apiKey: googleMapsApiKey });
    const libraries = {
      geometry: loader.importLibrary('geometry'),
      maps: loader.importLibrary('maps'),
      drawing: loader.importLibrary('drawing'),
      places: loader.importLibrary('places'),
    };
    geometryLibrary = await libraries.geometry;
    mapsLibrary = await libraries.maps;
    drawingLibrary = await libraries.drawing;
    placesLibrary = await libraries.places;

    // Get the address information for the default location.
    const geocoder = new google.maps.Geocoder();
    const geocoderResponse = await geocoder.geocode({
      address: defaultPlace.address,
    });
    const geocoderResult = geocoderResponse.results[0];

    // Initialize the map at the desired location.
    location = geocoderResult.geometry.location;
    map = new mapsLibrary.Map(mapElement, {
      center: location,
      zoom: zoom,
      tilt: 0,
      mapTypeId: 'satellite',
      mapTypeControl: false,
      fullscreenControl: false,
      rotateControl: false,
      streetViewControl: true,
      zoomControl: false,
    });
  });
</script>

<!-- Top bar -->
<div class="flex flex-row h-full">
  <!-- Main map -->
  <div bind:this={mapElement} class="w-full" />

<!-- Side bar -->
<aside class="flex-none md:w-96 w-80 p-2 pt-3 overflow-auto">
  <div class="flex flex-col space-y-2 h-full">

    <!-- Your Company Logo at the Top -->
    <div class="flex flex-col items-center w-full">
      <img src="/src/routes/Protium Logo Centered.svg" alt="Protium Company Logo" class="w-auto h-20 my-4" />
    </div>

    {#if placesLibrary && map}
      <SearchBar bind:location {placesLibrary} {map} initialValue={defaultPlace.name} />
    {/if}

    {#if location}
      <Sections {location} {map} {geometryLibrary} {googleMapsApiKey} />
    {/if}

      <!-- Your Customer's Company Logo at the Bottom -->
      <div class="flex-grow"></div> <!-- This ensures that the customer logo stays at the bottom -->
      <div class="flex flex-col items-center w-full pb-4">
        <img src="/src/routes/RomAIx - Logo Design.svg" alt="RomAIx Company Logo" class="w-auto h-20 my-4" />
      </div>

    </div>
  </aside>
</div>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/+page.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

// since there's no dynamic data here, we can prerender
// it so that it gets served as a static asset in production
export const prerender = true;


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/colors.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

export const binaryPalette = ['212121', 'B3E5FC'];
export const rainbowPalette = ['3949AB', '81D4FA', '66BB6A', 'FFE082', 'E53935'];
export const ironPalette = ['00000A', '91009C', 'E64616', 'FEB400', 'FFFFF6'];
export const sunlightPalette = ['212121', 'FFCA28'];
export const panelsPalette = ['E8EAF6', '1A237E'];


--- Directory: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components ---

--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/layer.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

			https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

import { binaryPalette, ironPalette, rainbowPalette, sunlightPalette } from './colors';
import { downloadGeoTIFF, type DataLayersResponse, type LayerId, type Bounds } from './solar';
import { renderPalette, renderRGB } from './visualize';

export interface Palette {
  colors: string[];
  min: string;
  max: string;
}

export interface Layer {
  id: LayerId;
  render: (showRoofOnly: boolean, month: number, day: number) => HTMLCanvasElement[];
  bounds: Bounds;
  palette?: Palette;
}

export async function getLayer(
  layerId: LayerId,
  urls: DataLayersResponse,
  googleMapsApiKey: string,
): Promise<Layer> {
  const get: Record<LayerId, () => Promise<Layer>> = {
    mask: async () => {
      const mask = await downloadGeoTIFF(urls.maskUrl, googleMapsApiKey);
      const colors = binaryPalette;
      return {
        id: layerId,
        bounds: mask.bounds,
        palette: {
          colors: colors,
          min: 'Niet-dak',
          max: 'Dak',
        },
        render: (showRoofOnly) => [
          renderPalette({
            data: mask,
            mask: showRoofOnly ? mask : undefined,
            colors: colors,
          }),
        ],
      };
    },
    dsm: async () => {
      const [mask, data] = await Promise.all([
        downloadGeoTIFF(urls.maskUrl, googleMapsApiKey),
        downloadGeoTIFF(urls.dsmUrl, googleMapsApiKey),
      ]);
      const sortedValues = Array.from(data.rasters[0]).sort((x, y) => x - y);
      const minValue = sortedValues[0];
      const maxValue = sortedValues.slice(-1)[0];
      const colors = rainbowPalette;
      return {
        id: layerId,
        bounds: mask.bounds,
        palette: {
          colors: colors,
          min: `${minValue.toFixed(1)} m`,
          max: `${maxValue.toFixed(1)} m`,
        },
        render: (showRoofOnly) => [
          renderPalette({
            data: data,
            mask: showRoofOnly ? mask : undefined,
            colors: colors,
            min: sortedValues[0],
            max: sortedValues.slice(-1)[0],
          }),
        ],
      };
    },
    rgb: async () => {
      const [mask, data] = await Promise.all([
        downloadGeoTIFF(urls.maskUrl, googleMapsApiKey),
        downloadGeoTIFF(urls.rgbUrl, googleMapsApiKey),
      ]);
      return {
        id: layerId,
        bounds: mask.bounds,
        render: (showRoofOnly) => [renderRGB(data, showRoofOnly ? mask : undefined)],
      };
    },
    annualFlux: async () => {
      const [mask, data] = await Promise.all([
        downloadGeoTIFF(urls.maskUrl, googleMapsApiKey),
        downloadGeoTIFF(urls.annualFluxUrl, googleMapsApiKey),
      ]);
      const colors = ironPalette;
      return {
        id: layerId,
        bounds: mask.bounds,
        palette: {
          colors: colors,
          min: 'Schaduw',
          max: 'Zon',
        },
        render: (showRoofOnly) => [
          renderPalette({
            data: data,
            mask: showRoofOnly ? mask : undefined,
            colors: colors,
            min: 0,
            max: 1800,
          }),
        ],
      };
    },
    monthlyFlux: async () => {
      const [mask, data] = await Promise.all([
        downloadGeoTIFF(urls.maskUrl, googleMapsApiKey),
        downloadGeoTIFF(urls.monthlyFluxUrl, googleMapsApiKey),
      ]);
      const colors = ironPalette;
      return {
        id: layerId,
        bounds: mask.bounds,
        palette: {
          colors: colors,
          min: 'Schaduw',
          max: 'Zon',
        },
        render: (showRoofOnly) =>
          [...Array(12).keys()].map((month) =>
            renderPalette({
              data: data,
              mask: showRoofOnly ? mask : undefined,
              colors: colors,
              min: 0,
              max: 200,
              index: month,
            }),
          ),
      };
    },
    hourlyShade: async () => {
      const [mask, ...months] = await Promise.all([
        downloadGeoTIFF(urls.maskUrl, googleMapsApiKey),
        ...urls.hourlyShadeUrls.map((url) => downloadGeoTIFF(url, googleMapsApiKey)),
      ]);
      const colors = sunlightPalette;
      return {
        id: layerId,
        bounds: mask.bounds,
        palette: {
          colors: colors,
          min: 'Schaduw',
          max: 'Zon',
        },
        render: (showRoofOnly, month, day) =>
          [...Array(24).keys()].map((hour) =>
            renderPalette({
              data: {
                ...months[month],
                rasters: months[month].rasters.map((values) =>
                  values.map((x) => x & (1 << (day - 1))),
                ),
              },
              mask: showRoofOnly ? mask : undefined,
              colors: colors,
              min: 0,
              max: 1,
              index: hour,
            }),
          ),
      };
    },
  };
  try {
    return get[layerId]();
  } catch (e) {
    console.error(`Error getting layer: ${layerId}\n`, e);
    throw e;
  }
}


--- Directory: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/sections ---

--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/solar.test.ts ---

/*
 Copyright 2024 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

import { test } from 'vitest';
import {} from './solar';

test('import works', () => {});


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/solar.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

			https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

// [START solar_api_data_types]
export interface DataLayersResponse {
  imageryDate: Date;
  imageryProcessedDate: Date;
  dsmUrl: string;
  rgbUrl: string;
  maskUrl: string;
  annualFluxUrl: string;
  monthlyFluxUrl: string;
  hourlyShadeUrls: string[];
  imageryQuality: 'HIGH' | 'MEDIUM' | 'LOW';
}

export interface Bounds {
  north: number;
  south: number;
  east: number;
  west: number;
}

// https://developers.google.com/maps/documentation/solar/reference/rest/v1/buildingInsights/findClosest
export interface BuildingInsightsResponse {
  name: string;
  center: LatLng;
  boundingBox: LatLngBox;
  imageryDate: Date;
  imageryProcessedDate: Date;
  postalCode: string;
  administrativeArea: string;
  statisticalArea: string;
  regionCode: string;
  solarPotential: SolarPotential;
  imageryQuality: 'HIGH' | 'MEDIUM' | 'LOW';
}

export interface SolarPotential {
  maxArrayPanelsCount: number;
  panelCapacityWatts: number;
  panelHeightMeters: number;
  panelWidthMeters: number;
  panelLifetimeYears: number;
  maxArrayAreaMeters2: number;
  maxSunshineHoursPerYear: number;
  carbonOffsetFactorKgPerMwh: number;
  wholeRoofStats: SizeAndSunshineStats;
  buildingStats: SizeAndSunshineStats;
  roofSegmentStats: RoofSegmentSizeAndSunshineStats[];
  solarPanels: SolarPanel[];
  solarPanelConfigs: SolarPanelConfig[];
  financialAnalyses: object;
}

export interface SizeAndSunshineStats {
  areaMeters2: number;
  sunshineQuantiles: number[];
  groundAreaMeters2: number;
}

export interface RoofSegmentSizeAndSunshineStats {
  pitchDegrees: number;
  azimuthDegrees: number;
  stats: SizeAndSunshineStats;
  center: LatLng;
  boundingBox: LatLngBox;
  planeHeightAtCenterMeters: number;
}

export interface SolarPanel {
  center: LatLng;
  orientation: 'LANDSCAPE' | 'PORTRAIT';
  segmentIndex: number;
  yearlyEnergyDcKwh: number;
}

export interface SolarPanelConfig {
  panelsCount: number;
  yearlyEnergyDcKwh: number;
  roofSegmentSummaries: RoofSegmentSummary[];
}

export interface RoofSegmentSummary {
  pitchDegrees: number;
  azimuthDegrees: number;
  panelsCount: number;
  yearlyEnergyDcKwh: number;
  segmentIndex: number;
}

export interface LatLng {
  latitude: number;
  longitude: number;
}

export interface LatLngBox {
  sw: LatLng;
  ne: LatLng;
}

export interface Date {
  year: number;
  month: number;
  day: number;
}

export interface RequestError {
  error: {
    code: number;
    message: string;
    status: string;
  };
}
// [END solar_api_data_types]

// https://developers.google.com/maps/documentation/solar/reference/rest/v1/dataLayers
export type LayerId = 'mask' | 'dsm' | 'rgb' | 'annualFlux' | 'monthlyFlux' | 'hourlyShade';

// [START solar_api_building_insights]
/**
 * Fetches the building insights information from the Solar API.
 *   https://developers.google.com/maps/documentation/solar/requests#make-building
 *
 * @param  {LatLng} location      Point of interest as latitude longitude.
 * @param  {string} apiKey        Google Cloud API key.
 * @return {Promise<DataLayersResponse>}  Building Insights response.
 */
export async function findClosestBuilding(
  location: google.maps.LatLng,
  apiKey: string,
): Promise<BuildingInsightsResponse> {
  const args = {
    'location.latitude': location.lat().toFixed(5),
    'location.longitude': location.lng().toFixed(5),
  };
  console.log('GET buildingInsights\n', args);
  const params = new URLSearchParams({ ...args, key: apiKey });
  return fetch(`https://solar.googleapis.com/v1/buildingInsights:findClosest?${params}`).then(
    async (response) => {
      const content = await response.json();
      if (response.status != 200) {
        console.error('findClosestBuilding\n', content);
        throw content;
      }
      console.log('buildingInsightsResponse', content);
      return content;
    },
  );
}
// [END solar_api_building_insights]

// [START solar_api_data_layers]
/**
 * Fetches the data layers information from the Solar API.
 *   https://developers.google.com/maps/documentation/solar/requests#make-data
 *
 * @param  {LatLng} location      Point of interest as latitude longitude.
 * @param  {number} radiusMeters  Radius of the data layer size in meters.
 * @param  {string} apiKey        Google Cloud API key.
 * @return {Promise<DataLayersResponse>}  Data Layers response.
 */
export async function getDataLayerUrls(
  location: LatLng,
  radiusMeters: number,
  apiKey: string,
): Promise<DataLayersResponse> {
  const args = {
    'location.latitude': location.latitude.toFixed(5),
    'location.longitude': location.longitude.toFixed(5),
    radius_meters: radiusMeters.toString(),
  };
  console.log('GET dataLayers\n', args);
  const params = new URLSearchParams({ ...args, key: apiKey });
  return fetch(`https://solar.googleapis.com/v1/dataLayers:get?${params}`).then(
    async (response) => {
      const content = await response.json();
      if (response.status != 200) {
        console.error('getDataLayerUrls\n', content);
        throw content;
      }
      console.log('dataLayersResponse', content);
      return content;
    },
  );
}
// [END solar_api_data_layers]

// [START solar_api_data_layer_custom_type]
export interface GeoTiff {
  width: number;
  height: number;
  rasters: Array<number>[];
  bounds: Bounds;
}
// [END solar_api_data_layer_custom_type]

// [START solar_api_download_geotiff]
// npm install geotiff geotiff-geokeys-to-proj4 proj4

import * as geotiff from 'geotiff';
import * as geokeysToProj4 from 'geotiff-geokeys-to-proj4';
import proj4 from 'proj4';

/**
 * Downloads the pixel values for a Data Layer URL from the Solar API.
 *
 * @param  {string} url        URL from the Data Layers response.
 * @param  {string} apiKey     Google Cloud API key.
 * @return {Promise<GeoTiff>}  Pixel values with shape and lat/lon bounds.
 */
export async function downloadGeoTIFF(url: string, apiKey: string): Promise<GeoTiff> {
  console.log(`Downloading data layer: ${url}`);

  // Include your Google Cloud API key in the Data Layers URL.
  const solarUrl = url.includes('solar.googleapis.com') ? url + `&key=${apiKey}` : url;
  const response = await fetch(solarUrl);
  if (response.status != 200) {
    const error = await response.json();
    console.error(`downloadGeoTIFF failed: ${url}\n`, error);
    throw error;
  }

  // Get the GeoTIFF rasters, which are the pixel values for each band.
  const arrayBuffer = await response.arrayBuffer();
  const tiff = await geotiff.fromArrayBuffer(arrayBuffer);
  const image = await tiff.getImage();
  const rasters = await image.readRasters();

  // Reproject the bounding box into lat/lon coordinates.
  const geoKeys = image.getGeoKeys();
  const projObj = geokeysToProj4.toProj4(geoKeys);
  const projection = proj4(projObj.proj4, 'WGS84');
  const box = image.getBoundingBox();
  const sw = projection.forward({
    x: box[0] * projObj.coordinatesConversionParameters.x,
    y: box[1] * projObj.coordinatesConversionParameters.y,
  });
  const ne = projection.forward({
    x: box[2] * projObj.coordinatesConversionParameters.x,
    y: box[3] * projObj.coordinatesConversionParameters.y,
  });

  return {
    // Width and height of the data layer image in pixels.
    // Used to know the row and column since Javascript
    // stores the values as flat arrays.
    width: rasters.width,
    height: rasters.height,
    // Each raster reprents the pixel values of each band.
    // We convert them from `geotiff.TypedArray`s into plain
    // Javascript arrays to make them easier to process.
    rasters: [...Array(rasters.length).keys()].map((i) =>
      Array.from(rasters[i] as geotiff.TypedArray),
    ),
    // The bounding box as a lat/lon rectangle.
    bounds: {
      north: ne.y,
      south: sw.y,
      east: ne.x,
      west: sw.x,
    },
  };
}
// [END solar_api_download_geotiff]

export function showLatLng(point: LatLng) {
  return `(${point.latitude.toFixed(5)}, ${point.longitude.toFixed(5)})`;
}

export function showDate(date: Date) {
  return `${date.month}/${date.day}/${date.year}`;
}


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/utils.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

			https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

import type { SolarPanelConfig } from './solar';

export function showNumber(x: number) {
  return x.toLocaleString(undefined, { maximumFractionDigits: 1 });
}

export function showMoney(amount: number) {
  return `€${amount.toLocaleString(undefined, {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  })}`;
}

export function findSolarConfig(
  solarPanelConfigs: SolarPanelConfig[],
  yearlyKwhEnergyConsumption: number,
  panelCapacityRatio: number,
  dcToAcDerate: number,
) {
  return solarPanelConfigs.findIndex(
    (config) =>
      config.yearlyEnergyDcKwh * panelCapacityRatio * dcToAcDerate >= yearlyKwhEnergyConsumption,
  );
}


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/visualize.ts ---

/*
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

import type { GeoTiff } from './solar';

// [START visualize_render_rgb]
/**
 * Renders an RGB GeoTiff image into an HTML canvas.
 *
 * The GeoTiff image must include 3 rasters (bands) which
 * correspond to [Red, Green, Blue] in that order.
 *
 * @param  {GeoTiff} rgb   GeoTiff with RGB values of the image.
 * @param  {GeoTiff} mask  Optional mask for transparency, defaults to opaque.
 * @return {HTMLCanvasElement}  Canvas element with the rendered image.
 */
export function renderRGB(rgb: GeoTiff, mask?: GeoTiff): HTMLCanvasElement {
  // Create an HTML canvas to draw the image.
  // https://www.w3schools.com/tags/canvas_createimagedata.asp
  const canvas = document.createElement('canvas');

  // Set the canvas size to the mask size if it's available,
  // otherwise set it to the RGB data layer size.
  canvas.width = mask ? mask.width : rgb.width;
  canvas.height = mask ? mask.height : rgb.height;

  // Since the mask size can be different than the RGB data layer size,
  // we calculate the "delta" between the RGB layer size and the canvas/mask
  // size. For example, if the RGB layer size is the same as the canvas size,
  // the delta is 1. If the RGB layer size is smaller than the canvas size,
  // the delta would be greater than 1.
  // This is used to translate the index from the canvas to the RGB layer.
  const dw = rgb.width / canvas.width;
  const dh = rgb.height / canvas.height;

  // Get the canvas image data buffer.
  const ctx = canvas.getContext('2d')!;
  const img = ctx.getImageData(0, 0, canvas.width, canvas.height);

  // Fill in every pixel in the canvas with the corresponding RGB layer value.
  // Since Javascript doesn't support multidimensional arrays or tensors,
  // everything is stored in flat arrays and we have to keep track of the
  // indices for each row and column ourselves.
  for (let y = 0; y < canvas.height; y++) {
    for (let x = 0; x < canvas.width; x++) {
      // RGB index keeps track of the RGB layer position.
      // This is multiplied by the deltas since it might be a different
      // size than the image size.
      const rgbIdx = Math.floor(y * dh) * rgb.width + Math.floor(x * dw);
      // Mask index keeps track of the mask layer position.
      const maskIdx = y * canvas.width + x;

      // Image index keeps track of the canvas image position.
      // HTML canvas expects a flat array with consecutive RGBA values.
      // Each value in the image buffer must be between 0 and 255.
      // The Alpha value is the transparency of that pixel,
      // if a mask was not provided, we default to 255 which is opaque.
      const imgIdx = y * canvas.width * 4 + x * 4;
      img.data[imgIdx + 0] = rgb.rasters[0][rgbIdx]; // Red
      img.data[imgIdx + 1] = rgb.rasters[1][rgbIdx]; // Green
      img.data[imgIdx + 2] = rgb.rasters[2][rgbIdx]; // Blue
      img.data[imgIdx + 3] = mask // Alpha
        ? mask.rasters[0][maskIdx] * 255
        : 255;
    }
  }

  // Draw the image data buffer into the canvas context.
  ctx.putImageData(img, 0, 0);
  return canvas;
}
// [END visualize_render_rgb]

// [START visualize_render_palette]
/**
 * Renders a single value GeoTiff image into an HTML canvas.
 *
 * The GeoTiff image must include 1 raster (band) which contains
 * the values we want to display.
 *
 * @param  {GeoTiff}  data    GeoTiff with the values of interest.
 * @param  {GeoTiff}  mask    Optional mask for transparency, defaults to opaque.
 * @param  {string[]} colors  Hex color palette, defaults to ['000000', 'ffffff'].
 * @param  {number}   min     Minimum value of the data range, defaults to 0.
 * @param  {number}   max     Maximum value of the data range, defaults to 1.
 * @param  {number}   index   Raster index for the data, defaults to 0.
 * @return {HTMLCanvasElement}  Canvas element with the rendered image.
 */
export function renderPalette({
  data,
  mask,
  colors,
  min,
  max,
  index,
}: {
  data: GeoTiff;
  mask?: GeoTiff;
  colors?: string[];
  min?: number;
  max?: number;
  index?: number;
}): HTMLCanvasElement {
  // First create a palette from a list of hex colors.
  const palette = createPalette(colors ?? ['000000', 'ffffff']);
  // Normalize each value of our raster/band of interest into indices,
  // such that they always map into a value within the palette.
  const indices = data.rasters[index ?? 0]
    .map((x) => normalize(x, max ?? 1, min ?? 0))
    .map((x) => Math.round(x * (palette.length - 1)));
  return renderRGB(
    {
      ...data,
      // Map each index into the corresponding RGB values.
      rasters: [
        indices.map((i: number) => palette[i].r),
        indices.map((i: number) => palette[i].g),
        indices.map((i: number) => palette[i].b),
      ],
    },
    mask,
  );
}

/**
 * Creates an {r, g, b} color palette from a hex list of colors.
 *
 * Each {r, g, b} value is a number between 0 and 255.
 * The created palette is always of size 256, regardless of the number of
 * hex colors passed in. Inbetween values are interpolated.
 *
 * @param  {string[]} hexColors  List of hex colors for the palette.
 * @return {{r, g, b}[]}         RGB values for the color palette.
 */
export function createPalette(hexColors: string[]): { r: number; g: number; b: number }[] {
  // Map each hex color into an RGB value.
  const rgb = hexColors.map(colorToRGB);
  // Create a palette with 256 colors derived from our rgb colors.
  const size = 256;
  const step = (rgb.length - 1) / (size - 1);
  return Array(size)
    .fill(0)
    .map((_, i) => {
      // Get the lower and upper indices for each color.
      const index = i * step;
      const lower = Math.floor(index);
      const upper = Math.ceil(index);
      // Interpolate between the colors to get the shades.
      return {
        r: lerp(rgb[lower].r, rgb[upper].r, index - lower),
        g: lerp(rgb[lower].g, rgb[upper].g, index - lower),
        b: lerp(rgb[lower].b, rgb[upper].b, index - lower),
      };
    });
}

/**
 * Convert a hex color into an {r, g, b} color.
 *
 * @param  {string} color  Hex color like 0099FF or #0099FF.
 * @return {{r, g, b}}     RGB values for that color.
 */
export function colorToRGB(color: string): { r: number; g: number; b: number } {
  const hex = color.startsWith('#') ? color.slice(1) : color;
  return {
    r: parseInt(hex.substring(0, 2), 16),
    g: parseInt(hex.substring(2, 4), 16),
    b: parseInt(hex.substring(4, 6), 16),
  };
}

/**
 * Normalizes a number to a given data range.
 *
 * @param  {number} x    Value of interest.
 * @param  {number} max  Maximum value in data range, defaults to 1.
 * @param  {number} min  Minimum value in data range, defaults to 0.
 * @return {number}      Normalized value.
 */
export function normalize(x: number, max: number = 1, min: number = 0): number {
  const y = (x - min) / (max - min);
  return clamp(y, 0, 1);
}

/**
 * Calculates the linear interpolation for a value within a range.
 *
 * @param  {number} x  Lower value in the range, when `t` is 0.
 * @param  {number} y  Upper value in the range, when `t` is 1.
 * @param  {number} t  "Time" between 0 and 1.
 * @return {number}    Inbetween value for that "time".
 */
export function lerp(x: number, y: number, t: number): number {
  return x + t * (y - x);
}

/**
 * Clamps a value to always be within a range.
 *
 * @param  {number} x    Value to clamp.
 * @param  {number} min  Minimum value in the range.
 * @param  {number} max  Maximum value in the range.
 * @return {number}      Clamped value.
 */
export function clamp(x: number, min: number, max: number): number {
  return Math.min(Math.max(x, min), max);
}
// [END visualize_render_palette]

export function rgbToColor({ r, g, b }: { r: number; g: number; b: number }): string {
  const f = (x: number) => {
    const hex = Math.round(x).toString(16);
    return hex.length == 1 ? `0${hex}` : hex;
  };
  return `#${f(r)}${f(g)}${f(b)}`;
}

--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/Calendar.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import Dropdown from './Dropdown.svelte';

  export let month: number;
  export let day: number;
  export let numCols = 7;
  export let onChange: (month: number, day: number) => void = () => {};

  let opened = false;

  const monthDays: Record<string, number> = {
    Januari: 31,
    Februari: 28,
    Maart: 31,
    April: 30,
    Mei: 31,
    Juni: 30,
    Juli: 31,
    Augustus: 31,
    September: 30,
    Oktober: 31,
    November: 30,
    December: 31,
  };

  const months = Object.keys(monthDays);

  function dayFrom(row: number, col: number) {
    return row * numCols + col + 1;
  }
</script>

<div class="relative">
  <md-text-button class="w-full" trailing-icon role={undefined} on:click={() => (opened = !opened)}>
    <div class="flex items-center">
      <md-icon>event</md-icon>
      <span>&nbsp; {months[month]} {day}</span>
    </div>
  </md-text-button>

  {#if opened}
    <div
      class="fixed top-0 left-0 w-full h-full z-10"
      role={undefined}
      on:click={() => (opened = false)}
    />

    <div
      class="surface-variant on-surface-variant-text absolute right-4 w-auto p-4 rounded-lg shadow-lg z-20"
    >
      <div class="px-4 pb-4">
        <Dropdown
          value={month.toString()}
          options={Object.fromEntries(months.map((month, i) => [i.toString(), month]))}
          onChange={async (value) => {
            month = Number(value);
            onChange(month, day);
          }}
        />
      </div>

      <table>
        {#each [...Array(Math.ceil(monthDays[months[month]] / numCols)).keys()] as row}
          <tr>
            {#each [...Array(numCols).keys()] as col}
              <td>
                {#if day == dayFrom(row, col)}
                  <button
                    class="primary on-primary-text relative w-8 h-8 rounded-full"
                    on:click={() => {
                      opened = false;
                    }}
                  >
                    <md-ripple />
                    {dayFrom(row, col)}
                  </button>
                {:else if dayFrom(row, col) <= monthDays[months[month]]}
                  <button
                    class="relative w-8 h-8 rounded-full"
                    on:click={async () => {
                      day = dayFrom(row, col);
                      opened = false;
                      onChange(month, day);
                    }}
                  >
                    <md-ripple />
                    {dayFrom(row, col)}
                  </button>
                {/if}
              </td>
            {/each}
          </tr>
        {/each}
      </table>
    </div>
  {/if}
</div>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/Dropdown.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  export let options: Record<string, string>;
  export let value: string;
  export let expandTop = false;
  export let onChange: (x: string) => void = () => {};

  let opened = false;
</script>

<div class="relative">
  <md-outlined-button
    class="w-full"
    trailing-icon
    role={undefined}
    on:click={() => (opened = !opened)}
  >
    <div class="flex items-center">
      {value !== undefined ? options[value] : 'Choose an option'}
      <md-icon slot="icon">{opened ? 'expand_less' : 'expand_more'}</md-icon>
    </div>
  </md-outlined-button>

  {#if opened}
    <div
      class="fixed top-0 left-0 w-full h-full z-10"
      role={undefined}
      on:click={() => (opened = false)}
    />

    <div
      class={`surface-variant on-surface-variant-text absolute ${
        expandTop ? 'bottom-full' : ''
      } w-full p-2 rounded-lg shadow-xl z-20`}
    >
      <div />
      {#each Object.keys(options) as option}
        <button
          class="dropdown-item block px-4 py-2 w-full text-left rounded"
          on:click={() => {
            value = option;
            opened = false;
            onChange(value);
          }}
        >
          {options[option]}
        </button>
      {/each}
    </div>
  {/if}
</div>

<style>
  .dropdown-item {
    background-color: var(--md-sys-color-surface-variant);
    color: var(--md-sys-color-on-surface);
  }
  .dropdown-item:hover {
    background-color: var(--md-sys-color-secondary);
    color: var(--md-sys-color-on-secondary);
  }
</style>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/Expandable.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import { slide } from 'svelte/transition';

  export let title: string;
  export let subtitle = '';
  export let subtitle2 = '';
  export let icon = '';
  export let section = '';
  export let secondary = false;

  const titleText = secondary ? 'secondary-text' : 'primary-text';

  function toggle() {
    section = section == title ? '' : title;
  }
</script>

<button class="flex flex-row w-full p-4" on:click={toggle}>
  <md-icon class={`${titleText} w-12`}>{icon}</md-icon>
  <div class="w-full grid justify-items-start text-left">
    <p class={`${titleText} body-large`}><b>{title}</b></p>
    <p class="label-medium outline-text">{subtitle}</p>
    <p class="label-medium outline-text">{subtitle2}</p>
  </div>
  <md-icon-button>
    <md-icon>{section == title ? 'expand_less' : 'expand_more'}</md-icon>
  </md-icon-button>
</button>

{#if section == title}
  <div class="px-4 pb-6" transition:slide={{ duration: 200 }}>
    <slot />
  </div>
{/if}


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/Gauge.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  export let icon: string;
  export let title: string;
  export let label: string;
  export let value: number;
  export let labelSuffix = '';
  export let min = 0.0;
  export let max = 1.0;
</script>

<div class="grid place-items-center">
  <p class="p-2 body-large">{title}</p>
  <div class="relative" style="width: 72px; height: 72px">
    <md-circular-progress {value} {min} {max} style="--md-circular-progress-size: 72px;" />
    <md-icon-button class="absolute inset-0 m-auto">
      <md-icon class="primary-text">{icon}</md-icon>
    </md-icon-button>
  </div>
  <p class="p-2 body-medium">
    <span class="primary-text">
      <b>{label}</b>
    </span>
    <span>{labelSuffix}</span>
  </p>
</div>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/InputBool.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import type { MdSwitch } from '@material/web/switch/switch';

  export let label: string;
  export let value: boolean = false;
  export let onChange: (value: boolean) => void = () => {};

  function onClick(event: Event) {
    const target = event.target as MdSwitch;
    value = target.selected;
    onChange(value);
  }
</script>

<label for={label} class="p-2 relative inline-flex items-center cursor-pointer">
  <md-switch id={label} role={undefined} selected={value} on:click={onClick} />
  <span class="ml-3 body-large">{label}</span>
</label>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/InputMoney.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import NumberInput from './InputNumber.svelte';

  export let icon: string;
  export let label: string;
  export let value: number = 0;
  export let prefix = '€';
  export let suffix: string | undefined = undefined;
  export let precision = 2;
  export let onChange: (x: number) => void = () => {};
</script>

<NumberInput
  bind:value
  min={0}
  {icon}
  {label}
  {suffix}
  {prefix}
  put={(x) => x.toFixed(precision)}
  {onChange}
/>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/InputNumber.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import type { MdOutlinedTextField } from '@material/web/textfield/outlined-text-field';

  export let icon: string;
  export let label: string;
  export let value = 0;
  export let min: number | undefined = undefined;
  export let max: number | undefined = undefined;
  export let prefix: string | undefined = undefined;
  export let suffix: string | undefined = undefined;
  export let put: (x: number) => string = (x) => x.toString();
  export let get: (x: number) => number = (x) => x;
  export let onChange: (x: number) => void = () => {};

  function _onChange(event: Event) {
    const target = event.target as MdOutlinedTextField;
    value = get(Number(target.value));
    onChange(value);
  }
</script>

<md-outlined-text-field
  type="number"
  {label}
  value={put(value)}
  {min}
  {max}
  prefix-text={prefix}
  suffix-text={suffix}
  on:change={_onChange}
>
  <md-icon slot="leadingicon">{icon}</md-icon>
</md-outlined-text-field>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/InputPanelsCount.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import type { MdSlider } from '@material/web/slider/slider';
  import type { SolarPanelConfig } from '../solar';

  export let configId: number;
  export let solarPanelConfigs: SolarPanelConfig[];

  function onChange(event: Event) {
    const target = event.target as MdSlider;
    configId = target.value ?? 0;
  }
</script>

<div>
  <table class="table-auto w-full body-medium secondary-text">
    <tr>
      <td class="primary-text"><md-icon>solar_power</md-icon> </td>
      <th class="pl-2 text-left">Panelen aantal</th>
      <td class="pl-2 text-right">
        <span>{solarPanelConfigs[configId].panelsCount} panelen</span>
      </td>
    </tr>
  </table>

  <md-slider
    class="w-full"
    value={configId}
    min={0}
    max={solarPanelConfigs.length - 1}
    on:change={onChange}
  />
</div>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/InputPercent.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import InputNumber from './InputNumber.svelte';

  export let icon: string;
  export let label: string;
  export let value = 0;
  export let prefix: string | undefined = undefined;
  export let suffix: string | undefined = '%';
  export let onChange: (x: number) => void = () => {};
</script>

<InputNumber
  bind:value
  {icon}
  {label}
  {prefix}
  {suffix}
  put={(x) => (x * 100).toLocaleString(undefined, { maximumSignificantDigits: 2 })}
  get={(x) => x / 100}
  {onChange}
/>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/InputRatio.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import InputNumber from './InputNumber.svelte';

  export let icon: string;
  export let label: string;
  export let value = 0;
  export let decrease = false;
  export let prefix: string | undefined = undefined;
  export let suffix: string | undefined = '%';
  export let onChange: (x: number) => void = () => {};
</script>

<InputNumber
  bind:value
  {icon}
  {label}
  {prefix}
  {suffix}
  put={(x) =>
    ((decrease ? 1 - x : x - 1) * 100).toLocaleString(undefined, {
      maximumSignificantDigits: 2,
    })}
  get={(x) => (decrease ? 1 - x / 100 : x / 100 + 1)}
  {onChange}
/>

<!-- get={(x) => 1 + (x / 100) * direction} -->


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/SearchBar.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  /* global google */

  import { onMount } from 'svelte';
  import type { MdFilledTextField } from '@material/web/textfield/filled-text-field';

  export let location: google.maps.LatLng | undefined;

  export let placesLibrary: google.maps.PlacesLibrary;
  export let map: google.maps.Map;
  export let initialValue = '';
  export let zoom = 19;

  let textFieldElement: MdFilledTextField;

  onMount(async () => {
    // https://lit.dev/docs/components/shadow-dom/
    await textFieldElement.updateComplete;
    const inputElement = textFieldElement.renderRoot.querySelector('input') as HTMLInputElement;
    const autocomplete = new placesLibrary.Autocomplete(inputElement, {
      fields: ['formatted_address', 'geometry', 'name'],
    });
    autocomplete.addListener('place_changed', async () => {
      const place = autocomplete.getPlace();
      if (!place.geometry || !place.geometry.location) {
        textFieldElement.value = '';
        return;
      }
      if (place.geometry.viewport) {
        // map.fitBounds(place.geometry.viewport);
        map.setCenter(place.geometry.location);
        map.setZoom(zoom);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(zoom);
      }

      location = place.geometry.location;
      if (place.name) {
        textFieldElement.value = place.name;
      } else if (place.formatted_address) {
        textFieldElement.value = place.formatted_address;
      }
    });
  });
</script>

<md-filled-text-field bind:this={textFieldElement} label="Vul een adres in" value={initialValue}>
  <md-icon slot="leadingicon">search</md-icon>
</md-filled-text-field>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/Show.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  /* eslint-disable @typescript-eslint/no-explicit-any */
  export let key: any = undefined;
  export let value: any;
  export let maxLength = 40;

  export let label = '';
  export let collapsed = false;

  let expanded = false;
  function toggle() {
    expanded = !expanded;
  }

  let summary: string = JSON.stringify(value);
  if (summary?.length >= maxLength) {
    summary = summary.substring(0, maxLength) + '...';
  }

  let items: { k: any; v: any }[];
  if (Array.isArray(value)) {
    items = value.map((v, i) => ({ k: i, v: v }));
  } else if (typeof value === 'object' && value !== null) {
    items = Object.keys(value).map((k) => ({ k: k, v: value[k] }));
  }
</script>

<div class="flex flex-col font-mono whitespace-nowrap">
  <div class="flex flex-row w-full">
    {#if collapsed && items !== undefined}
      <button on:click={toggle}>
        <md-icon>{expanded ? 'arrow_drop_down' : 'arrow_right'}</md-icon>
      </button>
    {:else}
      <div><md-icon>&nbsp;</md-icon></div>
    {/if}

    {#if key !== undefined}
      <span class="font-bold">{key}:&nbsp;</span>
    {/if}

    {#if label}
      <span>{label}</span>
    {:else if ['number', 'string', 'boolean', 'undefined'].includes(typeof value)}
      <span>{value}</span>
    {:else if value === null}
      <span>{value}</span>
    {:else if Array.isArray(value)}
      <span class="font-sans italic">({value.length}) {summary}</span>
    {:else}
      <span class="font-sans italic">{summary}</span>
    {/if}
  </div>

  {#if !collapsed || expanded}
    <div class="flex flex-col ml-8 pb-6 max-h-72 overflow-auto">
      {#if Array.isArray(value)}
        <span class="italic">length: {value.length}</span>
      {/if}
      <div
        style={collapsed
          ? 'border-left: solid; border-color: var(--md-sys-color-outline-variant);'
          : ''}
      >
        {#each items as { k, v }}
          <svelte:self key={k} value={v} collapsed={true} />
        {/each}
      </div>
    </div>
  {/if}
</div>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/SummaryCard.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  import Table from './Table.svelte';

  export let title: string = '';
  export let icon: string = '';
  export let rows: {
    name: string;
    value: string;
    units?: string;
    icon?: string;
  }[] = [];
</script>

<div class="grid justify-items-start surface on-surface-text p-4 rounded-lg shadow-lg">
  <div class="flex items-center primary-text">
    <md-icon class="w-8">{icon}</md-icon>
    <p class="body-large"><b>{title}</b></p>
  </div>
  <div class="py-3 w-full">
    <md-divider />
  </div>
  <div class="w-full secondary-text">
    <Table {rows} />
  </div>
  <div class="px-3">
    <slot />
  </div>
</div>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/components/Table.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  export let rows: {
    name: string;
    value: string;
    units?: string;
    icon?: string;
  }[] = [];
</script>

<table class="table-auto w-full body-medium">
  {#each rows as row}
    <tr>
      <td class="primary-text py-2">
        <md-icon>{row.icon ?? ''}</md-icon>
      </td>
      <th class="pl-2 text-left">
        {row.name}
      </th>
      <td class="pl-2 text-right">
        <span>{row.value.toString()}</span>
        <span class="body-small">{row.units ?? ''}</span>
      </td>
    </tr>
  {/each}
</table>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/sections/BuildingInsightsSection.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  /* global google */

  import type { MdDialog } from '@material/web/dialog/dialog';
  import Expandable from '../components/Expandable.svelte';
  import {
    type BuildingInsightsResponse,
    type RequestError,
    findClosestBuilding,
    type SolarPanelConfig,
  } from '../solar';
  import Show from '../components/Show.svelte';
  import SummaryCard from '../components/SummaryCard.svelte';
  import { createPalette, normalize, rgbToColor } from '../visualize';
  import { panelsPalette } from '../colors';
  import InputBool from '../components/InputBool.svelte';
  import InputPanelsCount from '../components/InputPanelsCount.svelte';
  import { showNumber } from '../utils';
  import NumberInput from '../components/InputNumber.svelte';
  import Gauge from '../components/Gauge.svelte';

  export let expandedSection: string;
  export let buildingInsights: BuildingInsightsResponse | undefined;
  export let configId: number | undefined;
  export let panelCapacityWatts: number;
  export let showPanels: boolean;

  export let googleMapsApiKey: string;
  export let geometryLibrary: google.maps.GeometryLibrary;
  export let location: google.maps.LatLng;
  export let map: google.maps.Map;

  const icon = 'home';
  const title = 'Gebouwgegevens';

  let requestSent = false;
  let requestError: RequestError | undefined;
  let apiResponseDialog: MdDialog;

  let panelConfig: SolarPanelConfig | undefined;
  $: if (buildingInsights && configId !== undefined) {
    panelConfig = buildingInsights.solarPotential.solarPanelConfigs[configId];
  }

  let solarPanels: google.maps.Polygon[] = [];
  $: solarPanels.map((panel, i) =>
    panel.setMap(showPanels && panelConfig && i < panelConfig.panelsCount ? map : null),
  );

  let panelCapacityRatio = 1.0;
  $: if (buildingInsights) {
    const defaultPanelCapacity = buildingInsights.solarPotential.panelCapacityWatts;
    panelCapacityRatio = panelCapacityWatts / defaultPanelCapacity;
  }

  export async function showSolarPotential(location: google.maps.LatLng) {
    if (requestSent) {
      return;
    }

    console.log('showSolarPotential');
    buildingInsights = undefined;
    requestError = undefined;

    solarPanels.map((panel) => panel.setMap(null));
    solarPanels = [];

    requestSent = true;
    try {
      buildingInsights = await findClosestBuilding(location, googleMapsApiKey);
    } catch (e) {
      requestError = e as RequestError;
      return;
    } finally {
      requestSent = false;
    }

    // Create the solar panels on the map.
    const solarPotential = buildingInsights.solarPotential;
    const palette = createPalette(panelsPalette).map(rgbToColor);
    const minEnergy = solarPotential.solarPanels.slice(-1)[0].yearlyEnergyDcKwh;
    const maxEnergy = solarPotential.solarPanels[0].yearlyEnergyDcKwh;
    solarPanels = solarPotential.solarPanels.map((panel) => {
      const [w, h] = [solarPotential.panelWidthMeters / 2, solarPotential.panelHeightMeters / 2];
      const points = [
        { x: +w, y: +h }, // top right
        { x: +w, y: -h }, // bottom right
        { x: -w, y: -h }, // bottom left
        { x: -w, y: +h }, // top left
        { x: +w, y: +h }, //  top right
      ];
      const orientation = panel.orientation == 'PORTRAIT' ? 90 : 0;
      const azimuth = solarPotential.roofSegmentStats[panel.segmentIndex].azimuthDegrees;
      const colorIndex = Math.round(normalize(panel.yearlyEnergyDcKwh, maxEnergy, minEnergy) * 255);
      return new google.maps.Polygon({
        paths: points.map(({ x, y }) =>
          geometryLibrary.spherical.computeOffset(
            { lat: panel.center.latitude, lng: panel.center.longitude },
            Math.sqrt(x * x + y * y),
            Math.atan2(y, x) * (180 / Math.PI) + orientation + azimuth,
          ),
        ),
        strokeColor: '#B0BEC5',
        strokeOpacity: 0.9,
        strokeWeight: 1,
        fillColor: palette[colorIndex],
        fillOpacity: 0.9,
      });
    });
  }

  $: showSolarPotential(location);
</script>

{#if requestError}
  <div class="error-container on-error-container-text">
    <Expandable section={title} icon="error" {title} subtitle={requestError.error.status}>
      <div class="grid place-items-center py-2 space-y-4">
        <div class="grid place-items-center">
          <p class="body-medium">
            Error on <code>buildingInsights</code> request
          </p>
          <p class="title-large">ERROR {requestError.error.code}</p>
          <p class="body-medium"><code>{requestError.error.status}</code></p>
          <p class="label-medium">{requestError.error.message}</p>
        </div>
        <md-filled-button role={undefined} on:click={() => showSolarPotential(location)}>
          Retry
          <md-icon slot="icon">refresh</md-icon>
        </md-filled-button>
      </div>
    </Expandable>
  </div>
{:else if !buildingInsights}
  <div class="grid py-8 place-items-center">
    <md-circular-progress four-color indeterminate />
  </div>
{:else if configId !== undefined && panelConfig}
  <Expandable
    bind:section={expandedSection}
    {icon}
    {title}
    subtitle={`Jaarlijkse energie: ${(
      (panelConfig.yearlyEnergyDcKwh * panelCapacityRatio) /
      1000
    ).toFixed(2)} MWh`}
  >
    <div class="flex flex-col space-y-2 px-2">
      <span class="outline-text label-medium">
        <b>{title}</b> geeft gegevens over de locatie, afmetingen en het zonnepotentieel van een gebouw.
      </span>

      <InputPanelsCount
        bind:configId
        solarPanelConfigs={buildingInsights.solarPotential.solarPanelConfigs}
      />
      <!--
        //YRS: input field voor panel capacity uitgeschakeld voor building insight section
      <NumberInput
        bind:value={panelCapacityWatts}
        icon="bolt"
        label="Paneelcapaciteit"
        suffix="Watt"
      />
      //YRS: einde input field voor panel capacity uitgeschakeld voor building insight section
      -->
      <InputBool bind:value={showPanels} label="Zonnepanelen" />

      <!--
        //YRS: API response button uitgeschakeld voor building insight section
      <div class="grid justify-items-end">
        <md-filled-tonal-button role={undefined} on:click={() => apiResponseDialog.show()}>
          API response
        </md-filled-tonal-button>
      </div>

      <md-dialog bind:this={apiResponseDialog}>
        <div slot="headline">
          <div class="flex items-center primary-text">
            <md-icon>{icon}</md-icon>
            <b>&nbsp;{title}</b>
          </div>
        </div>
        <div slot="content">
          <Show value={buildingInsights} label="buildingInsightsResponse" />
        </div>
        <div slot="actions">
          <md-text-button role={undefined} on:click={() => apiResponseDialog.close()}>
            Close
          </md-text-button>
        </div>
      </md-dialog>
    </div>
    //YRS: Einde van API response button voor building insight section
    -->

  </Expandable>

  {#if expandedSection == title}
    <div class="absolute top-0 left-0 w-75">
      <div class="flex flex-col space-y-2 m-2">
        <SummaryCard
          {icon}
          {title}
          rows={[
            {
              icon: 'wb_sunny',
              name: 'Jaarlijkse zon',
              value: showNumber(buildingInsights.solarPotential.maxSunshineHoursPerYear),
              units: 'uur',
            },
            {
              icon: 'square_foot',
              name: 'Dakoppervlak',
              value: showNumber(buildingInsights.solarPotential.wholeRoofStats.areaMeters2),
              units: 'm²',
            },
            {
              icon: 'solar_power',
              name: 'Max aantal panelen',
              value: showNumber(buildingInsights.solarPotential.solarPanels.length),
              units: 'panelen',
            },
            {
              icon: 'co2',
              name: 'CO₂ besparingen',
              value: showNumber(buildingInsights.solarPotential.carbonOffsetFactorKgPerMwh),
              units: 'Kg/MWh',
            },
          ]}
        />

        <div class="p-4 w-full surface on-surface-text rounded-lg shadow-md">
          <div class="flex justify-around">
            <Gauge
              icon="solar_power"
              title="Aantal panelen"
              label={showNumber(panelConfig.panelsCount)}
              labelSuffix={`/ ${showNumber(solarPanels.length)}`}
              max={solarPanels.length}
              value={panelConfig.panelsCount}
            />

            <Gauge
              icon="energy_savings_leaf"
              title="Jaarlijkse energie"
              label={showNumber((panelConfig?.yearlyEnergyDcKwh ?? 0) * panelCapacityRatio)}
              labelSuffix="KWh"
              max={buildingInsights.solarPotential.solarPanelConfigs.slice(-1)[0]
                .yearlyEnergyDcKwh * panelCapacityRatio}
              value={panelConfig.yearlyEnergyDcKwh * panelCapacityRatio}
            />
          </div>
        </div>
      </div>
    </div>
  {/if}
{/if}


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/sections/DataLayersSection.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  /* global google */

  import { onMount } from 'svelte';

  import type { MdDialog } from '@material/web/dialog/dialog';
  import Calendar from '../components/Calendar.svelte';
  import Dropdown from '../components/Dropdown.svelte';
  import Expandable from '../components/Expandable.svelte';
  import { getLayer, type Layer } from '../layer';
  import {
    getDataLayerUrls,
    type BuildingInsightsResponse,
    type DataLayersResponse,
    type LayerId,
    type RequestError,
  } from '../solar';
  import InputBool from '../components/InputBool.svelte';
  import Show from '../components/Show.svelte';
  import SummaryCard from '../components/SummaryCard.svelte';
  import type { MdSlider } from '@material/web/slider/slider';

  export let expandedSection: string;
  export let showPanels = true;

  export let googleMapsApiKey: string;
  export let buildingInsights: BuildingInsightsResponse;
  export let geometryLibrary: google.maps.GeometryLibrary;
  export let map: google.maps.Map;

  const icon = 'layers';
  const title = 'Afbeeldingen';

  const dataLayerOptions: Record<LayerId | 'none', string> = {
    none: 'Geen laag',
    mask: 'Dakmasker',
    dsm: 'Digital Surface Model',
    rgb: 'Luchtfoto',
    annualFlux: 'Jaarlijkse zonneschijn',
    monthlyFlux: 'Maandelijkse zonneschijn',
    hourlyShade: 'Uurlijkse schaduw',
  };

  const monthNames = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'Mei',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Okt',
    'Nov',
    'Dec',
  ];

  let dataLayersResponse: DataLayersResponse | undefined;
  let requestError: RequestError | undefined;
  let apiResponseDialog: MdDialog;
  let layerId: LayerId | 'none' = 'monthlyFlux';
  let layer: Layer | undefined;

  let playAnimation = true;
  let tick = 0;
  let month = 0;
  let day = 14;
  let hour = 0;

  let overlays: google.maps.GroundOverlay[] = [];
  let showRoofOnly = false;
  async function showDataLayer(reset = false) {
    if (reset) {
      dataLayersResponse = undefined;
      requestError = undefined;
      layer = undefined;

      // Default values per layer.
      showRoofOnly = ['annualFlux', 'monthlyFlux', 'hourlyShade'].includes(layerId);
      map.setMapTypeId(layerId == 'rgb' ? 'roadmap' : 'satellite');
      overlays.map((overlay) => overlay.setMap(null));
      month = layerId == 'hourlyShade' ? 3 : 0;
      day = 14;
      hour = 5;
      playAnimation = ['monthlyFlux', 'hourlyShade'].includes(layerId);
    }
    if (layerId == 'none') {
      return;
    }

    if (!layer) {
      const center = buildingInsights.center;
      const ne = buildingInsights.boundingBox.ne;
      const sw = buildingInsights.boundingBox.sw;
      const diameter = geometryLibrary.spherical.computeDistanceBetween(
        new google.maps.LatLng(ne.latitude, ne.longitude),
        new google.maps.LatLng(sw.latitude, sw.longitude),
      );
      const radius = Math.ceil(diameter / 2);
      try {
        dataLayersResponse = await getDataLayerUrls(center, radius, googleMapsApiKey);
      } catch (e) {
        requestError = e as RequestError;
        return;
      }

      try {
        layer = await getLayer(layerId, dataLayersResponse, googleMapsApiKey);
      } catch (e) {
        requestError = e as RequestError;
        return;
      }
    }

    const bounds = layer.bounds;
    console.log('Render layer:', {
      layerId: layer.id,
      showRoofOnly: showRoofOnly,
      month: month,
      day: day,
    });
    overlays.map((overlay) => overlay.setMap(null));
    overlays = layer
      .render(showRoofOnly, month, day)
      .map((canvas) => new google.maps.GroundOverlay(canvas.toDataURL(), bounds));

    if (!['monthlyFlux', 'hourlyShade'].includes(layer.id)) {
      overlays[0].setMap(map);
    }
  }

  $: if (layer?.id == 'monthlyFlux') {
    overlays.map((overlay, i) => overlay.setMap(i == month ? map : null));
  } else if (layer?.id == 'hourlyShade') {
    overlays.map((overlay, i) => overlay.setMap(i == hour ? map : null));
  }

  function onSliderChange(event: Event) {
    const target = event.target as MdSlider;
    if (layer?.id == 'monthlyFlux') {
      if (target.valueStart != month) {
        month = target.valueStart ?? 0;
      } else if (target.valueEnd != month) {
        month = target.valueEnd ?? 0;
      }
      tick = month;
    } else if (layer?.id == 'hourlyShade') {
      if (target.valueStart != hour) {
        hour = target.valueStart ?? 0;
      } else if (target.valueEnd != hour) {
        hour = target.valueEnd ?? 0;
      }
      tick = hour;
    }
  }

  $: if (layer?.id == 'monthlyFlux') {
    if (playAnimation) {
      month = tick % 12;
    } else {
      tick = month;
    }
  } else if (layer?.id == 'hourlyShade') {
    if (playAnimation) {
      hour = tick % 24;
    } else {
      tick = hour;
    }
  }

  onMount(() => {
    showDataLayer(true);

    setInterval(() => {
      tick++;
    }, 1000);
  });
</script>

{#if requestError}
  <div class="error-container on-error-container-text">
    <Expandable section={title} icon="error" {title} subtitle={requestError.error.status}>
      <div class="grid place-items-center py-2 space-y-4">
        <div class="grid place-items-center">
          <p class="body-medium">
            Error on <code>dataLayers</code>
            {layerId} request
          </p>
          <p class="title-large">ERROR {requestError.error.code}</p>
          <p class="body-medium"><code>{requestError.error.status}</code></p>
          <p class="label-medium">{requestError.error.message}</p>
        </div>
        <md-filled-button role={undefined} on:click={() => showDataLayer(true)}>
          Retry
          <md-icon slot="icon">refresh</md-icon>
        </md-filled-button>
      </div>
    </Expandable>
  </div>
{:else}
  <Expandable bind:section={expandedSection} {icon} {title} subtitle={dataLayerOptions[layerId]}>
    <div class="flex flex-col space-y-2 px-2">
      <span class="outline-text label-medium">
        <b>{title}</b> geeft ruwe en bewerkte beelden en gedetailleerde details over een gebied rondom
        een locatie.
      </span>

      <Dropdown
        bind:value={layerId}
        options={dataLayerOptions}
        onChange={async () => showDataLayer(true)}
      />

      {#if layerId == 'none'}
        <div />
      {:else if !layer}
        <md-linear-progress four-color indeterminate />
      {:else}
        {#if layer.id == 'hourlyShade'}
          <Calendar bind:month bind:day onChange={async () => showDataLayer()} />
        {/if}

        <InputBool bind:value={showPanels} label="Zonnepanelen" />
        <InputBool bind:value={showRoofOnly} label="Enkel dak" onChange={() => showDataLayer()} />

        {#if ['monthlyFlux', 'hourlyShade'].includes(layerId)}
          <InputBool bind:value={playAnimation} label="Speel animatie af" />
        {/if}
      {/if}
      <div class="flex flex-row">
        <div class="grow" />
        <md-filled-tonal-button role={undefined} on:click={() => apiResponseDialog.show()}>
          API response
        </md-filled-tonal-button>
      </div>

      <md-dialog bind:this={apiResponseDialog}>
        <div slot="headline">
          <div class="flex items-center primary-text">
            <md-icon>{icon}</md-icon>
            <b>&nbsp;{title}</b>
          </div>
        </div>
        <div slot="content">
          <Show value={dataLayersResponse} label="dataLayersResponse" />
        </div>
        <div slot="actions">
          <md-text-button role={undefined} on:click={() => apiResponseDialog.close()}>
            Close
          </md-text-button>
        </div>
      </md-dialog>
    </div>
  </Expandable>
{/if}

<div class="absolute top-0 left-0 w-72">
  {#if expandedSection == title && layer}
    <div class="m-2">
      <SummaryCard {icon} {title} rows={[{ name: dataLayerOptions[layerId], value: '' }]}>
        <div class="flex flex-col space-y-4">
          <p class="outline-text">
            {#if layerId == 'mask'}
              De afbeelding van het gebouwmasker: één bit per pixel die zegt of die pixel wordt beschouwd als
              onderdeel van een dak of niet.
            {:else if layerId == 'dsm'}
              Een afbeelding van het DSM (Digital Surface Model) van de regio. De waarden zijn in meters boven
              EGM96 geoïde (d.w.z. zeeniveau). Ongeldige locaties (waar we geen gegevens hebben) worden opgeslagen
              als -9999.
            {:else if layerId == 'rgb'}
              Een afbeelding van RGB-gegevens (luchtfoto) van de regio.
            {:else if layerId == 'annualFlux'}
              De jaarlijkse fluxkaart (jaarlijks zonlicht op daken) van de regio. Waarden zijn kWh/kW/jaar.
              Dit is een ongemaskeerde flux: de flux wordt berekend voor elke locatie, niet alleen voor daken van gebouwen.
              daken. Ongeldige locaties worden opgeslagen als -9999: locaties buiten ons dekkingsgebied
              zullen ongeldig zijn, en een paar locaties binnen het dekkingsgebied, waar we geen flux konden berekenen, zullen ook ongeldig zijn.
              flux konden berekenen, zullen ook ongeldig zijn.
            {:else if layerId == 'monthlyFlux'}
              De maandelijkse fluxkaart (zonlicht op daken, uitgesplitst per maand) van de regio. De waarden
              zijn kWh/kW/jaar. Het GeoTIFF-beeldbestand waarnaar deze URL verwijst, bevat twaalf
              banden, overeenkomend met januari...december, in volgorde.
            {:else if layerId == 'hourlyShade'}
              Twaalf URL's voor schaduw per uur, overeenkomend met januari...december, in volgorde. Elk
              GeoTIFF-beeldbestand bevat 24 banden, overeenkomend met de 24 uur van de dag.
              Elke pixel is een geheel getal van 32 bits, dat overeenkomt met de (maximaal) 31 dagen van die maand; een
              1 bit betekent dat de corresponderende locatie de zon kan zien op die dag, dat uur, die maand.
              dat uur, van die maand. Ongeldige locaties worden opgeslagen als -9999 (omdat dit
              negatief is, is bit 31 gezet, en geen enkele geldige waarde kan bit 31 gezet hebben omdat dat zou overeenkomen met de 32e dag van de maand.
              overeenkomen met de 32e dag van de maand).
            {/if}
          </p>

          {#if layer.palette}
            <div>
              <div
                class="h-2 outline rounded-sm"
                style={`background: linear-gradient(to right, ${layer.palette.colors.map(
                  (hex) => '#' + hex,
                )})`}
              />
              <div class="flex justify-between pt-1 label-small">
                <span>{layer.palette.min}</span>
                <span>{layer.palette.max}</span>
              </div>
            </div>
          {/if}
        </div>
      </SummaryCard>
    </div>
  {/if}
</div>

<div class="absolute bottom-6 left-0 w-full">
  <div class="md:mr-96 mr-80 grid place-items-center">
    {#if layer}
      <div
        class="flex items-center surface on-surface-text pr-4 text-center label-large rounded-full shadow-md"
      >
        {#if layer.id == 'monthlyFlux'}
          <md-slider
            range
            min={0}
            max={11}
            value-start={month}
            value-end={month}
            on:input={onSliderChange}
          />
          <span class="w-8">{monthNames[month]}</span>
        {:else if layer.id == 'hourlyShade'}
          <md-slider
            range
            min={0}
            max={23}
            value-start={hour}
            value-end={hour}
            on:input={onSliderChange}
          />
          <span class="w-24 whitespace-nowrap">
            {monthNames[month]}
            {day},
            {#if hour == 0}
              12am
            {:else if hour < 10}
              {hour}am
            {:else if hour < 12}
              {hour}am
            {:else if hour == 12}
              12pm
            {:else if hour < 22}
              {hour - 12}pm
            {:else}
              {hour - 12}pm
            {/if}
          </span>
        {/if}
      </div>
    {/if}
  </div>
</div>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/sections/Sections.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  /* global google */

  import type { BuildingInsightsResponse } from '../solar';
  import { findSolarConfig } from '../utils';
  import BuildingInsightsSection from './BuildingInsightsSection.svelte';
  import DataLayersSection from './DataLayersSection.svelte';
  import SolarPotentialSection from './SolarPotentialSection.svelte';

  export let location: google.maps.LatLng;
  export let map: google.maps.Map;
  export let geometryLibrary: google.maps.GeometryLibrary;
  export let googleMapsApiKey: string;

  let buildingInsights: BuildingInsightsResponse | undefined;

  // State
  let expandedSection: string = '';
  let showPanels = true;

  // User settings
  let monthlyAverageEnergyBillInput = 300;
  let panelCapacityWattsInput = 250;
  let energyCostPerKwhInput = 0.31;
  let dcToAcDerateInput = 0.85;

  // Find the config that covers the yearly energy consumption.
  let yearlyKwhEnergyConsumption: number;
  $: yearlyKwhEnergyConsumption = (monthlyAverageEnergyBillInput / energyCostPerKwhInput) * 12;

  let configId: number | undefined;
  $: if (configId === undefined && buildingInsights) {
    const defaultPanelCapacity = buildingInsights.solarPotential.panelCapacityWatts;
    const panelCapacityRatio = panelCapacityWattsInput / defaultPanelCapacity;
    configId = findSolarConfig(
      buildingInsights.solarPotential.solarPanelConfigs,
      yearlyKwhEnergyConsumption,
      panelCapacityRatio,
      dcToAcDerateInput,
    );
  }
</script>

<div class="flex flex-col rounded-md shadow-md">
  {#if geometryLibrary && map}
    <BuildingInsightsSection
      bind:expandedSection
      bind:buildingInsights
      bind:configId
      bind:showPanels
      bind:panelCapacityWatts={panelCapacityWattsInput}
      {googleMapsApiKey}
      {geometryLibrary}
      {location}
      {map}
    />
  {/if}

  {#if buildingInsights && configId !== undefined}
    <md-divider inset />
    <DataLayersSection
      bind:expandedSection
      bind:showPanels
      {googleMapsApiKey}
      {buildingInsights}
      {geometryLibrary}
      {map}
    />

    <md-divider inset />
    <SolarPotentialSection
      bind:expandedSection
      bind:configId
      bind:monthlyAverageEnergyBillInput
      bind:energyCostPerKwhInput
      bind:panelCapacityWattsInput
      bind:dcToAcDerateInput
      solarPanelConfigs={buildingInsights.solarPotential.solarPanelConfigs}
      defaultPanelCapacityWatts={buildingInsights.solarPotential.panelCapacityWatts}
    />
  {/if}
</div>


--- File: /Users/yannickromainsegaar/Desktop/RomAIx - Solar API Test/js-solar-potential/src/routes/sections/SolarPotentialSection.svelte ---

<!--
 Copyright 2023 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<script lang="ts">
  /* global google */

  import { slide } from 'svelte/transition';

  import Expandable from '../components/Expandable.svelte';
  import SummaryCard from '../components/SummaryCard.svelte';
  import type { SolarPanelConfig } from '../solar';
  import Table from '../components/Table.svelte';

  /* eslint-disable @typescript-eslint/ban-ts-comment */
  // @ts-ignore
  import { GoogleCharts } from 'google-charts';
  import { findSolarConfig, showMoney, showNumber } from '../utils';
  import InputNumber from '../components/InputNumber.svelte';
  import InputPanelsCount from '../components/InputPanelsCount.svelte';
  import InputMoney from '../components/InputMoney.svelte';
  import InputPercent from '../components/InputPercent.svelte';
  import InputRatio from '../components/InputRatio.svelte';

  export let expandedSection: string;
  export let configId: number;
  export let monthlyAverageEnergyBillInput: number;
  export let energyCostPerKwhInput: number;
  export let panelCapacityWattsInput: number;
  export let dcToAcDerateInput: number;
  export let solarPanelConfigs: SolarPanelConfig[];
  export let defaultPanelCapacityWatts: number;

  const icon = 'payments';
  const title = 'Quickscan Resultaten';

  let costChart: HTMLElement;
  let showAdvancedSettings = false;

  // [START solar_potential_calculations]
  // Solar configuration, from buildingInsights.solarPotential.solarPanelConfigs
  let panelsCount = 20;
  let yearlyEnergyDcKwh = 12000;

  // Basic settings
  let monthlyAverageEnergyBill: number = 300;
  let energyCostPerKwh = 0.31;
  let panelCapacityWatts = 400;
  let solarIncentives: number = 7000;
  let installationCostPerWatt: number = 4.0;
  let installationLifeSpan: number = 20;

  // Advanced settings
  let dcToAcDerate = 0.85;
  let efficiencyDepreciationFactor = 0.995;
  let costIncreaseFactor = 1.022;
  let discountRate = 1.04;

  // Solar installation
  let installationSizeKw: number = (panelsCount * panelCapacityWatts) / 1000;
  let installationCostTotal: number = installationCostPerWatt * installationSizeKw * 1000;

  // Energy consumption
  let monthlyKwhEnergyConsumption: number = monthlyAverageEnergyBill / energyCostPerKwh;
  let yearlyKwhEnergyConsumption: number = monthlyKwhEnergyConsumption * 12;

  // Energy produced for installation life span
  let initialAcKwhPerYear: number = yearlyEnergyDcKwh * dcToAcDerate;
  let yearlyProductionAcKwh: number[] = [...Array(installationLifeSpan).keys()].map(
    (year) => initialAcKwhPerYear * efficiencyDepreciationFactor ** year,
  );

  // Cost with solar for installation life span
  let yearlyUtilityBillEstimates: number[] = yearlyProductionAcKwh.map(
    (yearlyKwhEnergyProduced, year) => {
      const billEnergyKwh = yearlyKwhEnergyConsumption - yearlyKwhEnergyProduced;
      const billEstimate =
        (billEnergyKwh * energyCostPerKwh * costIncreaseFactor ** year) / discountRate ** year;
      return Math.max(billEstimate, 0); // bill cannot be negative
    },
  );
  let remainingLifetimeUtilityBill: number = yearlyUtilityBillEstimates.reduce((x, y) => x + y, 0);
  let totalCostWithSolar: number =
    installationCostTotal + remainingLifetimeUtilityBill - solarIncentives;
  console.log(`Kosten met zonne-energie: €${totalCostWithSolar.toFixed(2)}`);

  // Cost without solar for installation life span
  let yearlyCostWithoutSolar: number[] = [...Array(installationLifeSpan).keys()].map(
    (year) => (monthlyAverageEnergyBill * 12 * costIncreaseFactor ** year) / discountRate ** year,
  );
  let totalCostWithoutSolar: number = yearlyCostWithoutSolar.reduce((x, y) => x + y, 0);
  console.log(`Kosten zonder zonne-energie: €${totalCostWithoutSolar.toFixed(2)}`);

  // Savings with solar for installation life span
  let savings: number = totalCostWithoutSolar - totalCostWithSolar;
  console.log(`Besparingen: €${savings.toFixed(2)} in ${installationLifeSpan} jaar`);
  // [END solar_potential_calculations]

  // Reactive calculations
  let panelCapacityRatio: number = 1.0;
  $: panelCapacityRatio = panelCapacityWattsInput / defaultPanelCapacityWatts;
  $: installationCostTotal = installationCostPerWatt * installationSizeKw * 1000;
  $: if (solarPanelConfigs[configId]) {
    installationSizeKw = (solarPanelConfigs[configId].panelsCount * panelCapacityWattsInput) / 1000;
  }
  $: monthlyKwhEnergyConsumption = monthlyAverageEnergyBillInput / energyCostPerKwhInput;
  $: yearlyKwhEnergyConsumption = monthlyKwhEnergyConsumption * 12;
  $: if (solarPanelConfigs[configId]) {
    initialAcKwhPerYear =
      solarPanelConfigs[configId].yearlyEnergyDcKwh * panelCapacityRatio * dcToAcDerateInput;
  }
  $: yearlyProductionAcKwh = [...Array(installationLifeSpan).keys()].map(
    (year) => initialAcKwhPerYear * efficiencyDepreciationFactor ** year,
  );
  $: yearlyUtilityBillEstimates = yearlyProductionAcKwh.map((yearlyKwhEnergyProduced, year) => {
    const billEnergyKwh = yearlyKwhEnergyConsumption - yearlyKwhEnergyProduced;
    const billEstimate =
      (billEnergyKwh * energyCostPerKwhInput * costIncreaseFactor ** year) / discountRate ** year;
    return Math.max(billEstimate, 0); // bill cannot be negative
  });
  $: remainingLifetimeUtilityBill = yearlyUtilityBillEstimates.reduce((x, y) => x + y, 0);
  $: totalCostWithSolar = installationCostTotal + remainingLifetimeUtilityBill - solarIncentives;
  $: yearlyCostWithoutSolar = [...Array(installationLifeSpan).keys()].map(
    (year) =>
      (monthlyAverageEnergyBillInput * 12 * costIncreaseFactor ** year) / discountRate ** year,
  );
  $: totalCostWithoutSolar = yearlyCostWithoutSolar.reduce((x, y) => x + y, 0);
  $: savings = totalCostWithoutSolar - totalCostWithSolar;

  let energyCovered: number;
  $: energyCovered = yearlyProductionAcKwh[0] / yearlyKwhEnergyConsumption;

  let breakEvenYear: number = -1;
  $: GoogleCharts.load(
    () => {
      if (!costChart) {
        return;
      }
      const year = new Date().getFullYear();

      let costWithSolar = 0;
      const cumulativeCostsWithSolar = yearlyUtilityBillEstimates.map(
        (billEstimate, i) =>
          (costWithSolar +=
            i == 0 ? billEstimate + installationCostTotal - solarIncentives : billEstimate),
      );
      let costWithoutSolar = 0;
      const cumulativeCostsWithoutSolar = yearlyCostWithoutSolar.map(
        (cost) => (costWithoutSolar += cost),
      );
      breakEvenYear = cumulativeCostsWithSolar.findIndex(
        (costWithSolar, i) => costWithSolar <= cumulativeCostsWithoutSolar[i],
      );

      const data = google.visualization.arrayToDataTable([
        ['Jaar', 'Panelen', 'Zonder panelen'],
        [year.toString(), 0, 0],
        ...cumulativeCostsWithSolar.map((_, i) => [
          (year + i + 1).toString(),
          cumulativeCostsWithSolar[i],
          cumulativeCostsWithoutSolar[i],
        ]),
      ]);

      /* eslint-disable @typescript-eslint/no-explicit-any */
      const googleCharts = google.charts as any;
      const chart = new googleCharts.Line(costChart);
      const options = googleCharts.Line.convertOptions({
        title: `Kostenanalyse voor ${installationLifeSpan} jaar`,
        width: 350,
        height: 200,
      });
      chart.draw(data, options);
    },
    { packages: ['line'] },
  );

  function updateConfig() {
    monthlyKwhEnergyConsumption = monthlyAverageEnergyBillInput / energyCostPerKwhInput;
    yearlyKwhEnergyConsumption = monthlyKwhEnergyConsumption * 12;
    panelCapacityRatio = panelCapacityWattsInput / defaultPanelCapacityWatts;
    configId = findSolarConfig(
      solarPanelConfigs,
      yearlyKwhEnergyConsumption,
      panelCapacityRatio,
      dcToAcDerateInput,
    );
  }
</script>

<Expandable
  bind:section={expandedSection}
  {icon}
  {title}
  subtitle="Deze waardes zijn slechts tijdelijke plaatshouders."
  subtitle2="Aanpassen met je eigen meetwaarden."
  secondary
>
  <div class="flex flex-col space-y-4 pt-1">
    <div class="p-4 mb-4 surface-variant outline-text rounded-lg">
      <p class="relative inline-flex items-center space-x-2">
        <md-icon class="md:w-6 w-8">info</md-icon>
        <span>
          Projecties gebruiken een
          <a
            class="primary-text"
            href="https://developers.google.com/maps/documentation/solar/calculate-costs-us"
            target="_blank"
          >
            Amerikaans financieel model
            <md-icon class="text-sm">open_in_new</md-icon>
          </a>
        </span>
      </p>
    </div>

    <InputMoney
      bind:value={monthlyAverageEnergyBillInput}
      icon="credit_card"
      label="Gemiddelde maandelijkse elektriciteitsrekening"
      onChange={updateConfig}
    />

    <div class="inline-flex items-center space-x-2">
      <div class="grow">
        <InputPanelsCount bind:configId {solarPanelConfigs} />
      </div>
      <md-icon-button role={undefined} on:click={updateConfig}>
        <md-icon>sync</md-icon>
      </md-icon-button>
    </div>

    <InputMoney
      bind:value={energyCostPerKwhInput}
      icon="paid"
      label="Energiekosten per kWh"
      onChange={updateConfig}
    />

    <InputMoney
      bind:value={solarIncentives}
      icon="redeem"
      label="Overheids subsidies en regelingen"
      onChange={updateConfig}
    />

    <InputMoney
      bind:value={installationCostPerWatt}
      icon="request_quote"
      label="Installatiekosten per Watt"
      onChange={updateConfig}
    />

    <InputNumber
      bind:value={panelCapacityWattsInput}
      icon="bolt"
      label="Paneelcapaciteit"
      suffix="Watt"
      onChange={updateConfig}
    />

    <div class="flex flex-col items-center w-full">
      <md-text-button
        trailing-icon
        role={undefined}
        on:click={() => (showAdvancedSettings = !showAdvancedSettings)}
      >
        {showAdvancedSettings ? 'Hide' : 'Show'} advanced settings
        <md-icon slot="icon">
          {showAdvancedSettings ? 'expand_less' : 'expand_more'}
        </md-icon>
      </md-text-button>
    </div>

    {#if showAdvancedSettings}
      <div class="flex flex-col space-y-4" transition:slide={{ duration: 200 }}>
        <InputNumber
          bind:value={installationLifeSpan}
          icon="date_range"
          label="Levensduur van installatie "
          suffix="jaar"
          onChange={updateConfig}
        />

        <InputPercent
          bind:value={dcToAcDerateInput}
          icon="dynamic_form"
          label="DC naar AC conversie"
          onChange={updateConfig}
        />

        <InputRatio
          bind:value={efficiencyDepreciationFactor}
          icon="trending_down"
          label="Paneelefficiëntie vermindering per jaar"
          decrease
          onChange={updateConfig}
        />

        <InputRatio
          bind:value={costIncreaseFactor}
          icon="price_change"
          label="Energiekostenstijging per jaar"
          onChange={updateConfig}
        />

        <InputRatio
          bind:value={discountRate}
          icon="local_offer"
          label="Disconteringspercentage per jaar"
          onChange={updateConfig}
        />
      </div>
    {/if}

    <div class="grid justify-items-end">
      <md-filled-tonal-button
        trailing-icon
        role={undefined}
        href="https://developers.google.com/maps/documentation/solar/calculate-costs-us"
        target="_blank"
      >
        More details
        <md-icon slot="icon">open_in_new</md-icon>
      </md-filled-tonal-button>
    </div>
  </div>
</Expandable>

<div class="absolute top-0 left-0">
  {#if expandedSection == title}
    <div class="flex flex-col space-y-2 m-2">
      <SummaryCard
        {icon}
        {title}
        rows={[
          {
            icon: 'energy_savings_leaf',
            name: 'Jaarlijkse energie',
            value: showNumber(
              (solarPanelConfigs[configId]?.yearlyEnergyDcKwh ?? 0) * panelCapacityRatio,
            ),
            units: 'kWh',
          },
          {
            icon: 'speed',
            name: 'Installatiegrootte',
            value: showNumber(installationSizeKw),
            units: 'kW',
          },
          {
            icon: 'request_quote',
            name: 'Installatiekosten',
            value: showMoney(installationCostTotal),
          },
          {
            icon: [
              'battery_0_bar',
              'battery_1_bar',
              'battery_2_bar',
              'battery_3_bar',
              'battery_4_bar',
              'battery_5_bar',
              'battery_full',
            ][Math.floor(Math.min(Math.round(energyCovered * 100) / 100, 1) * 6)],
            name: 'Energiedekking',
            value: Math.round(energyCovered * 100).toString(),
            units: '%',
          },
        ]}
      />
    </div>

    <div class="mx-2 p-4 surface on-surface-text rounded-lg shadow-lg">
      <div bind:this={costChart} />
      <div class="w-full secondary-text">
        <Table
          rows={[
            {
              icon: 'wallet',
              name: 'Kosten zonder zonne-energie',
              value: showMoney(totalCostWithoutSolar),
            },
            {
              icon: 'wb_sunny',
              name: 'Kosten met zonne-energie',
              value: showMoney(totalCostWithSolar),
            },
            {
              icon: 'savings',
              name: 'Besparingen',
              value: showMoney(savings),
            },
            {
              icon: 'balance',
              name: 'Break even',
              value:
                breakEvenYear >= 0
                  ? `${breakEvenYear + new Date().getFullYear() + 1} in ${breakEvenYear + 1}`
                  : '--',
              units: 'jaar',
            },
          ]}
        />
      </div>
    </div>
  {/if}
</div>

